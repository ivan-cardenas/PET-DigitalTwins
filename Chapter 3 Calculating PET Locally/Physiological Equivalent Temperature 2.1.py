# -*- coding: utf-8 -*-
"""
Generated by ArcGIS ModelBuilder on : 2023-06-08 14:45:13
"""
import arcpy
from arcpy.ia import *
from arcpy.ia import *
from arcpy.ia import *
from arcpy.ia import *
from arcpy.ia import *
from arcpy.ia import *
from arcpy.ia import *
from sys import argv

def Model1(Building="Building", Grass_Areas="Gras", New_Trees_Point="New Tree", Tree_Original_Polygons="Hide\\New Group Layer\\Sample Tree 6m Height", NDVI="Hide\\UHI_Enschede\\NDVI_Enschede_m07to08_19", Water_Streams="Water Bodies\\Water Streams", Water_plains_Lakes_laggons_ponds_="Water Bodies\\Water Plains", Other_Water_Bodies_OSM_="Water Bodies\\Waterbodies OSM", Original_DSM="Hide\\UHI_Enschede\\DSM_4000_4326_tif", DTM="Hide\\UHI_Enschede\\DTM", Date="25/07/2019 14:00:00", Latitude=52.274, Longitude=6.891, Temperature_in_C=40.2, Solar_Irradiation_in_W_m2=211.5072, Relative_Humidity=47, Wind_Speed_at_1_2m="Hide\\UHI_Enschede\\Wind_2ms", Cell_Size="1", PET_output_Layer=r"{arcpy.env.scratchFolder}\PET.tif", Analysis_Extent="Window Extent"):  # Physiological Equivalent Temperature 2.1

    # To allow overwriting outputs change overwriteOutput option to True.
    arcpy.env.overwriteOutput = False

    # Check out any necessary licenses.
    arcpy.CheckOutExtension("3D")
    arcpy.CheckOutExtension("spatial")
    arcpy.CheckOutExtension("ImageAnalyst")

    arcpy.ImportToolbox(r"C:\Users\loque\OneDrive - University of Twente\ENSCHEDE Digital Twins\General\PRO\Digital Twin\Digital Twin.atbx")

    # Process: Wet Bulb Temperature (Wet Bulb Temperature) (DigitalTwinatbx)
    WB = arcpy.DigitalTwinatbx.WetBulb(Relative_Humidity=Relative_Humidity.__str__().format(**locals(),**globals()), Temperature=Temperature_in_C.__str__().format(**locals(),**globals()))[0]

    # Process: Solar Radiation Angle (Solar Radiation Angle) (DigitalTwinatbx)
    Solar_Angle = arcpy.DigitalTwinatbx.SolarRadiation(DateTime=Date.__str__().format(**locals(),**globals()), Latitude=Latitude.__str__().format(**locals(),**globals()), Longitude=Longitude.__str__().format(**locals(),**globals()))[0]

    # Process: Assign Bowen to Builldings (Calculate Field) (management)
    with arcpy.EnvManager(extent=Analysis_Extent):
        Buildings = arcpy.management.CalculateField(in_table=Building.__str__().format(**locals(),**globals()), field="Value", expression="3")[0]

    # Process: Merge (Merge) (management)
    Waterways_OSM_Merge = "in_memory\\Waterways_OSM_Merge"
    if Buildings:
        with arcpy.EnvManager(extent=Analysis_Extent):
            arcpy.management.Merge(inputs=[Other_Water_Bodies_OSM_, Water_Streams, Water_plains_Lakes_laggons_ponds_], output=Waterways_OSM_Merge)

    # Process: Dissolve (Dissolve) (management)
    WaterBodies = "in_memory\\Waterways_OSM_Merge_Dissolve"
    if Buildings:
        with arcpy.EnvManager(extent=Analysis_Extent):
            arcpy.management.Dissolve(in_features=Waterways_OSM_Merge, out_feature_class=WaterBodies)

    # Process: Add Field Waterbodies (Add Field) (management)
    if Buildings:
        watter_addfield = arcpy.management.AddField(in_table=WaterBodies, field_name="Boolean", field_type="SHORT")[0]

    # Process: Assign Water Bodies Bowen Ratio (Calculate Field) (management)
    if Buildings:
        with arcpy.EnvManager(extent=Analysis_Extent):
            water_Calculate_field = arcpy.management.CalculateField(in_table=watter_addfield, field="Boolean", expression="1")[0]

    # Process: Create Water Raster (Polygon to Raster) (conversion)
    Water_Raster = "in_memory\\WaterRaster"
    if Buildings:
        with arcpy.EnvManager(cellSize=Cell_Size, extent=Analysis_Extent):
            arcpy.conversion.PolygonToRaster(in_features=water_Calculate_field, value_field="Boolean", out_rasterdataset=Water_Raster, cellsize="1")

    # Process: Calculate Field (Calculate Field) (management)
    with arcpy.EnvManager(extent=Analysis_Extent):
        Gras_2_ = arcpy.management.CalculateField(in_table=Grass_Areas.__str__().format(**locals(),**globals()), field="Boolean", expression="4")[0]

    # Process: Grass to Raster (Polygon to Raster) (conversion)
    Grass_R = "in_memory\\Gras_PolygonToRaster"
    with arcpy.EnvManager(cellSize=Cell_Size, extent=Analysis_Extent):
        arcpy.conversion.PolygonToRaster(in_features=Gras_2_, value_field="Boolean", out_rasterdataset=Grass_R, cellsize="1", build_rat="DO_NOT_BUILD")

    # Process: Buildings to Raster - Bowen (Polygon to Raster) (conversion)
    Building_Raster_Bowen = "in_memory\\BuildingRasterBowen"
    with arcpy.EnvManager(cellSize=Cell_Size, extent=Analysis_Extent, snapRaster=NDVI):
        arcpy.conversion.PolygonToRaster(in_features=Buildings, value_field="Value", out_rasterdataset=Building_Raster_Bowen, cellsize="1")

    # Process: Reclassify NDVI to Bowen (Reclassify) (3d)
    Pre_NDVI = "C:\\GIS\\MASTER\\DT_GDB.gdb\\Reclass_NDVI"
    with arcpy.EnvManager(cellSize=Cell_Size, extent=Analysis_Extent):
        arcpy.ddd.Reclassify(in_raster=NDVI.__str__().format(**locals(),**globals()), reclass_field="VALUE", remap="-1 0.400000 30;0.400000 0.700000 4;0.700000 0.914463 3", out_raster=Pre_NDVI, missing_values="NODATA")
        Pre_NDVI = arcpy.Raster(Pre_NDVI)

    # Process: Raster Calculator (Raster Calculator) (ia)
    NDVI_RECLASS = "in_memory\\NDVI_Reclass"
    Raster_Calculator = NDVI_RECLASS
    with arcpy.EnvManager(cellSize=Cell_Size, extent=Analysis_Extent):
        NDVI_RECLASS = Pre_NDVI/10
        NDVI_RECLASS.save(Raster_Calculator)


    # Process: Buildings to Bowen Conditional (Raster Calculator) (ia)
    NDVI_Buildings = "in_memory\\NDVI_Build"
    Buildings_to_Bowen_Conditional = NDVI_Buildings
    with arcpy.EnvManager(cellSize=Cell_Size, extent=Analysis_Extent):
        NDVI_Buildings = Con(IsNull(Building_Raster_Bowen),NDVI_RECLASS,(Building_Raster_Bowen))
        NDVI_Buildings.save(Buildings_to_Bowen_Conditional)


    # Process: Grass + Buildings (Raster Calculator) (ia)
    NDVI_GRASS = "in_memory\\Bowen_Grass"
    Grass_Buildings = NDVI_GRASS
    with arcpy.EnvManager(cellSize=Cell_Size, extent=Analysis_Extent):
        NDVI_GRASS = Con(IsNull(Grass_R),NDVI_Buildings,(Grass_R/10))
        NDVI_GRASS.save(Grass_Buildings)


    # Process: Calculate BowenRatio (Raster Calculator) (ia)
    BowenRatio = "in_memory\\BowenRatio"
    Calculate_BowenRatio = BowenRatio
    if Buildings:
        with arcpy.EnvManager(cellSize=Cell_Size, extent=Analysis_Extent):
            BowenRatio = Con(IsNull( Water_Raster), NDVI_GRASS,( Water_Raster/10))
            BowenRatio.save(Calculate_BowenRatio)


    # Process: Create New Trees (Create New Trees) (DigitalTwinatbx)
    Stamped_Trees = arcpy.DigitalTwinatbx.StampTrees(New_Trees=New_Trees_Point.__str__().format(**locals(),**globals()), Tree_Shape=Tree_Original_Polygons.__str__().format(**locals(),**globals()))[0]

    # Process: Polygon to Raster (Polygon to Raster) (conversion)
    Stamped_Trees_PolygonToRaster = "in_memory\\Stamped_Trees_PolygonToRaster"
    with arcpy.EnvManager(cellSize=Cell_Size, extent=Analysis_Extent):
        arcpy.conversion.PolygonToRaster(in_features=Stamped_Trees, value_field="Height", out_rasterdataset=Stamped_Trees_PolygonToRaster, cellsize="1")

    # Process: Buildings to Raster -Height (Polygon to Raster) (conversion)
    Building_Raster_Height = "in_memory\\BuildingRasterHeights"
    with arcpy.EnvManager(cellSize=Cell_Size, extent=Analysis_Extent, snapRaster=NDVI):
        arcpy.conversion.PolygonToRaster(in_features=Building.__str__().format(**locals(),**globals()), value_field="Height_m", out_rasterdataset=Building_Raster_Height, cellsize="1")

    # Process: Buildings new Raster (Raster Calculator) (ia)
    DSM_new_Buildings = "in_memory\\DSM_New"
    Buildings_new_Raster = DSM_new_Buildings
    with arcpy.EnvManager(cellSize=Cell_Size, extent=Analysis_Extent):
        DSM_new_Buildings = Con(IsNull(Building_Raster_Height),Original_DSM,(Building_Raster_Height+DTM))
        DSM_new_Buildings.save(Buildings_new_Raster)


    # Process: Stamped + New Buildings (Raster Calculator) (ia)
    DSM_New_B_T = "in_memory\\DSM_NEW_B_T"
    Stamped_New_Buildings = DSM_New_B_T
    with arcpy.EnvManager(cellSize=Cell_Size, extent=Analysis_Extent):
        DSM_New_B_T = Con(IsNull(Stamped_Trees_PolygonToRaster),DSM_new_Buildings,(Stamped_Trees_PolygonToRaster+DSM_new_Buildings))
        DSM_New_B_T.save(Stamped_New_Buildings)


    # Process: Resample (Resample) (management)
    DSM_Resampled = "in_memory\\DSM_FILLED_Resample"
    with arcpy.EnvManager(extent=Analysis_Extent):
        arcpy.management.Resample(in_raster=DSM_New_B_T, out_raster=DSM_Resampled)
        DSM_Resampled = arcpy.Raster(DSM_Resampled)

    # Process: Calculate SVF (Sky View Factor) (DigitalTwinatbx)
    SVF = "in_memory\\SVF"
    arcpy.DigitalTwinatbx.SVF(DSM=DSM_Resampled, Outpath=SVF)

    # Process: Calculate PET (Raster Calculator) (ia)
    Calculate_PET = PET_output_Layer
    if Buildings:
        with arcpy.EnvManager(cellSize=Cell_Size):
            PET_output_Layer = -13.26+(1.25*float('Temperature_in_C'))+(0.011*float('Solar_Irradiation_in_W_m2'))-(3.37* Ln(Wind_Speed_at_1_2m))+(0.078* float('WB'))+(0.0055* float('Solar_Irradiation_in_W_m2')*Ln(Wind_Speed_at_1_2m))+(5.56*Sin(float('Solar_Angle')))-(0.0103*float('Solar_Irradiation_in_W_m2')*Ln(Wind_Speed_at_1_2m)*Sin(float('Solar_Angle')))+(0.0546* BowenRatio)+(1.94* SVF)
            PET_output_Layer.save(Calculate_PET)


if __name__ == '__main__':
    # Global Environment settings
    with arcpy.EnvManager(scratchWorkspace="C:\\GIS\\MASTER\\DT_GDB.gdb", workspace="C:\\GIS\\MASTER\\DT_GDB.gdb"):
        Model1(*argv[1:])
